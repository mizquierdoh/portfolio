{"version":3,"sources":["components/Resurrection.js","components/App.js","serviceWorker.js","index.js"],"names":["urlResurrection","corsUrl","Resurrection","state","bandas","searchBands","fetch","concat","then","response","text","cher","cheerio","load","doc","DOMParser","parseFromString","xml","miercolesHTML","querySelector","juevesHTML","viernesHTML","sabadoHTML","_this","tratarHTML","console","log","sort","compararFechas","catch","error","message","html","escenario","nodosDia","Array","from","childNodes","filter","node","nodeName","dia","innerText","substring","slice","forEach","nodoDia","nodosEscenarios","nodo","i","nodoEscenarios","textContent","diaFin","horaInicio","split","minInicio","horaFin","minFin","nombre","substr","diaInicio","banda","id","length","Date","push","setState","a","b","fecha","getHours","setDate","getDate","toLocaleDateString","weekday","day","this","_this2","react_default","createElement","className","scope","map","key","getDia","toLocaleTimeString","hour","minute","Component","App","components_Resurrection","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c036d29a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport cheerio from 'cheerio';\r\n\r\n\r\nconst urlResurrection = 'http://www.resurrectionfest.es/';\r\nconst corsUrl = 'https://cors-anywhere.herokuapp.com/'\r\n\r\n\r\nclass Resurrection extends Component {\r\n\r\n    state = { bandas: [] }\r\n\r\n    searchBands = () => {\r\n\r\n        fetch(`${corsUrl}${urlResurrection}/horarios/`)\r\n            .then((response) => {\r\n                return response.text()\r\n            })\r\n            .then(text => {\r\n\r\n                var cher = cheerio.load(text);\r\n                const parser = new DOMParser();\r\n                const doc = parser.parseFromString(cher.xml(), 'text/html');\r\n                var miercolesHTML = doc.querySelector(\"#page-top > div.wrap.container > div > div:nth-child(2) > article > div > div > div:nth-child(14)\");\r\n                var juevesHTML = doc.querySelector(\"#page-top > div.wrap.container > div > div:nth-child(2) > article > div > div > div:nth-child(15)\");\r\n                var viernesHTML = doc.querySelector(\"#page-top > div.wrap.container > div > div:nth-child(2) > article > div > div > div:nth-child(16)\");\r\n                var sabadoHTML = doc.querySelector(\"#page-top > div.wrap.container > div > div:nth-child(2) > article > div > div > div:nth-child(17)\");\r\n\r\n                this.tratarHTML(miercolesHTML);\r\n                this.tratarHTML(juevesHTML);\r\n                this.tratarHTML(viernesHTML);\r\n                this.tratarHTML(sabadoHTML);\r\n                console.log(this.state.bandas.sort(this.compararFechas));\r\n\r\n                // var hijos = miercolesHTML.querySelector(\"#page-top > div.wrap.container > div > div:nth-child(2) > article > div > div > div:nth-child(14) > p:nth-child(2)\")\r\n                //     .innerHTML.split(\"<br>\");\r\n\r\n                // var escenario;\r\n                // var bandas = [];\r\n\r\n                // for (var i = 0; i < hijos.length; i++) {\r\n                //     if (i === 0) {\r\n                //         escenario = hijos[i].replace(\"<em>\", \"\").replace(\"</em>\", \"\");\r\n                //     }\r\n                //     else {\r\n\r\n                //         var banda = {\r\n                //             id: i,\r\n                //             horaInicio: new Date(2019, 6, 3, hijos[i].substring(1, 6).split(':')[0], hijos[i].substring(1, 6).split(':')[1], 0),\r\n                //             horaFin: new Date(2019, 6, 3, hijos[i].substring(9, 14).split(':')[0], hijos[i].substring(9, 14).split(':')[1], 0),\r\n                //             escenario: escenario,\r\n                //             nombre: hijos[i].substr(15)\r\n                //         };\r\n                //         // console.log(banda);\r\n                //         bandas.push(banda);\r\n                //     }\r\n                // }\r\n                // console.log('bandas', bandas);\r\n\r\n                // console.log('miercoles', miercolesHTML);\r\n                // console.log('children', hijos);\r\n\r\n                // this.setState({ bandas: bandas.sort(this.compararFechas) });\r\n            })\r\n\r\n            .catch((error) => console.log(error, error.message));\r\n\r\n    }\r\n\r\n    compararFechas(a, b) {\r\n        var fA = a.horaInicio;\r\n        var fB = b.horaInicio;\r\n        return fA - fB;\r\n        // if (fA.getDate() !== fB.getDate()) {\r\n        //     return fA.getDate() - fB.getDate();\r\n        // }\r\n        // else if (fA.getHours() !== fB.getHours()) {\r\n        //     return fA.getHours() - fB.getHours()\r\n        // }\r\n        // else if (fA.getMinutes() !== fB.getMinutes()) {\r\n        //     return fA.getMinutes() - fB.getMinutes()\r\n        // }\r\n        // else {\r\n        //     return 0;\r\n        // }\r\n\r\n\r\n    }\r\n\r\n    tratarHTML = (html) => {\r\n        var bandas = this.state.bandas.sort(this.compararFechas);\r\n        var nodosDia = Array.from(html.childNodes).filter(node => node.nodeName !== \"#text\");\r\n        var dia = nodosDia[0].childNodes[0].innerText.substring(1, 2);\r\n\r\n        nodosDia = nodosDia.slice(1);\r\n        var escenario;\r\n        nodosDia.forEach(nodoDia => {\r\n            var nodosEscenarios = Array.from(nodoDia.childNodes).filter(nodo => nodo.nodeName !== \"BR\");\r\n            // console.log(nodosEscenarios);\r\n            var i = 0;\r\n            nodosEscenarios.forEach(nodoEscenarios => {\r\n\r\n                if (i === 0) {\r\n                    if (nodoEscenarios.nodeName === \"EM\") {\r\n                        escenario = nodoEscenarios.innerText;\r\n                    }\r\n                    else {\r\n                        escenario = nodoEscenarios.textContent;\r\n                    }\r\n                    // console.log(nodoEscenarios, escenario);\r\n\r\n                }\r\n                else {\r\n\r\n\r\n                    var horaInicio = nodoEscenarios.textContent.substring(1, 6).split(':')[0];\r\n                    var minInicio = nodoEscenarios.textContent.substring(1, 6).split(':')[1];\r\n                    var horaFin = nodoEscenarios.textContent.substring(9, 14).split(':')[0];\r\n                    var minFin = nodoEscenarios.textContent.substring(9, 14).split(':')[1];\r\n                    var nombre = nodoEscenarios.textContent.substr(15)\r\n                    var diaInicio = dia;\r\n                    if (horaInicio < 5) {\r\n                        diaInicio++;\r\n                    }\r\n                    var diaFin;\r\n                    if (horaFin < 5) {\r\n                        diaFin++;\r\n                    }\r\n                    var banda = {\r\n                        id: bandas.length,\r\n                        horaInicio: new Date(2019, 6, diaInicio, horaInicio, minInicio, 0),\r\n                        horaFin: new Date(2019, 6, diaFin, horaFin, minFin, 0),\r\n                        escenario: escenario,\r\n                        nombre\r\n                    };\r\n                    console.log(nodoEscenarios, dia, escenario, horaInicio, minInicio, horaFin, minFin, nombre, banda);\r\n                    bandas.push(banda);\r\n                    console.log(bandas);\r\n\r\n                }\r\n                i++;\r\n            })\r\n\r\n        })\r\n\r\n        this.setState({ bandas: bandas.sort(this.compararFechas) })\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    getDia(fecha) {\r\n\r\n        var dia = fecha;\r\n        if (fecha.getHours() < 4) {\r\n            dia.setDate(fecha.getDate() - 1)\r\n        }\r\n        return dia.toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric' });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.searchBands();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <h1>Resurrection </h1>\r\n                <div>\r\n                    <table className=\"table\" >\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\">Banda</th>\r\n                                <th scope=\"col\">Día</th>\r\n                                <th scope=\"col\">Escenario</th>\r\n                                <th scope=\"col\">Inicio</th>\r\n                                <th scope=\"col\">Final</th>\r\n                            </tr>\r\n                        </thead>\r\n\r\n                        < tbody >\r\n                            {\r\n\r\n                                this.state.bandas.map(banda => (\r\n                                    <tr key={banda.id} >\r\n                                        < td > {banda.nombre} </td>\r\n                                        <td> {this.getDia(banda.horaInicio)}</td>\r\n                                        <td> {banda.escenario}</td>\r\n                                        <td>{banda.horaInicio.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} </td>\r\n                                        < td > {banda.horaFin.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} </td>\r\n\r\n                                    </tr>\r\n                                ))\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Resurrection;","import React from 'react';\n\nimport Resurrection from './Resurrection';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Resurrection />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}